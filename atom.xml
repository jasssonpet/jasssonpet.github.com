<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jason Zhekov&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jasssonpet.github.com/"/>
  <updated>2016-09-26T12:41:19.000Z</updated>
  <id>http://jasssonpet.github.com/</id>
  
  <author>
    <name>Jason Zhekov</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NativeScript iOS Runtime Support for Xcode 8/iOS 10 SDK</title>
    <link href="http://jasssonpet.github.com/nativescript-ios-runtime-support-for-xcode8-ios10-sdk/"/>
    <id>http://jasssonpet.github.com/nativescript-ios-runtime-support-for-xcode8-ios10-sdk/</id>
    <published>2016-09-13T21:00:00.000Z</published>
    <updated>2016-09-26T12:41:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developer.apple.com/xcode/">Xcode 8</a> is just around the block and will soon come as a recommended Apple update to all of you. Here we’ll see what implications will this have on your NativeScript development workflow.</p> <a id="more"></a> <p>This Xcode release comes with <a href="https://developer.apple.com/library/content/releasenotes/DeveloperTools/RN-Xcode/Introduction.html">many new features</a> such as runtime issues, thread sanitizer, visual native memory debugging, simplified code signing and many more that can be also quite useful for your NativeScript applications, but in this post we are going to focus on a more specific topic - the latest iOS SDK. Xcode 8 comes with the iOS 10 SDK and this is what you’ll be using to build and <a href="https://github.com/NativeScript/ios-runtime-docs/blob/master/Overview.md#metadata">generate metadata</a> for your applications.</p> <blockquote> <p>Don’t worry, applications built with the iOS 10 SDK can be still deployed on devices with lower OS versions down to the deployment target of the application which is iOS 8 by default as of now.</p> </blockquote> <h2 id="Class-Properties"><a href="#Class-Properties" class="headerlink" title="Class Properties"></a>Class Properties</h2><p>There are many <a href="https://developer.apple.com/library/content/releasenotes/General/iOS10APIDiffs/">API differences</a> between the iOS 9 and the iOS 10 SDKs, but there is one specific change that we want to inform you about and that will likely affect many of you who use iOS APIs in your JavaScript modules. And that is many Objective-C static methods have been upgraded to the newely introduced <a href="https://developer.apple.com/videos/play/wwdc2016/405/?time=305">Objective-C class properties syntax</a>.</p> <p>Here is an example:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// In Xcode 7/iOS 9 SDK currentDevice is declared as a static method.</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIDevice</span> : <span class="title">NSObject</span></span></div><div class="line">+ (<span class="built_in">UIDevice</span> *)currentDevice;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">// In Xcode 8/iOS 10 SDK this is changed to a static property.</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIDevice</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">class</span>, <span class="keyword">readonly</span>) <span class="built_in">UIDevice</span> *currentDevice;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p> <p>And here are the JavaScript projections that you can call from NativeScript:<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// When building with Xcode 7/iOS 9 SDK</span></div><div class="line"><span class="keyword">class</span> UIDevice extends NSObject &#123;</div><div class="line">    <span class="keyword">static</span> currentDevice(): UIDevice;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// When building with Xcode 8/iOS 10 SDK</span></div><div class="line"><span class="keyword">class</span> UIDevice extends NSObject &#123;</div><div class="line">    <span class="keyword">static</span> readonly currentDevice: UIDevice;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p> <p>What this means is that you have to change all <code>UIDevice.currentDevice()</code> calls to <code>UIDevice.currentDevice</code> in your JavaScript code when building with Xcode 8.</p> <p>To help you make this transition easier, we have also updated our <a href="https://jasssonpet.github.io/generating-typescript-declarations-in-nativescript-for-javascript-coffeescript-code-completion/">TypeScript generator tool</a> to support the iOS 10 SDK. Please make use of it even if you are not fond of TypeScript - these declarations can be used from most IDEs that support JavaScript completion and will help you catch such changes at compile time.</p> <h2 id="Recommended-Migration-Path"><a href="#Recommended-Migration-Path" class="headerlink" title="Recommended Migration Path"></a>Recommended Migration Path</h2><p>Here are our suggestions:</p> <ul> <li>Update to Xcode 8 and make it your default coding environment. Make sure it is set as the active command line tool.</li> <li>Update your apps with the 2.3 release of the iOS runtime, NativeScript Core modules and NativeScript CLI. They have the required changes to support Xcode 8.</li> <li>If you are a plugin developer:<ul> <li>Build and test your plugins to be compatible with the iOS 10 SDK.</li> <li>Make any needed changes to the native iOS APIs calls in your JavaScript files.</li> <li>Republish your plugins and update the system requirements to Xcode 8.</li> </ul> </li> <li>If you are an application developer:<ul> <li>Build and test your application to be compatible with the iOS 10 SDK.</li> <li>Make any needed changes to the native iOS APIs calls in your JavaScript files.</li> <li>If you are using plugins that are not yet updated for Xcode 8, contact the respective plugin maintainers or make a PR for that.</li> </ul> </li> </ul> <p>SDK updates can be a bit frustrating, but we are hoping that Xcode 8 will be the new default soon.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/xcode/&quot;&gt;Xcode 8&lt;/a&gt; is just around the block and will soon come as a recommended Apple update to all of you. Here we’ll see what implications will this have on your NativeScript development workflow.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>NativeScript Runtime Preview for Windows 10</title>
    <link href="http://jasssonpet.github.com/nativescript-runtime-preview-for-windows-10/"/>
    <id>http://jasssonpet.github.com/nativescript-runtime-preview-for-windows-10/</id>
    <published>2016-03-16T22:00:00.000Z</published>
    <updated>2016-09-26T12:32:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve written a short blog post about open-sourcing the <a href="https://github.com/NativeScript/windows-runtime">Windows NativeScript Runtime</a> for the <a href="https://msdn.microsoft.com/en-us/windows/uwp/get-started/whats-a-uwp">Universal Windows Platform</a>. You can find it on the official blog at <a href="https://www.nativescript.org/blog/nativescript-runtime-preview-for-windows-10">https://www.nativescript.org/blog/nativescript-runtime-preview-for-windows-10</a>.</p> <a id="more"></a> <p><a href="https://www.nativescript.org/blog/nativescript-runtime-preview-for-windows-10"><img src="/nativescript-runtime-preview-for-windows-10/windows-runtime-hello-world.png" alt="Running a NativeScript application on Windows" title="Running a NativeScript application on Windows"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I’ve written a short blog post about open-sourcing the &lt;a href=&quot;https://github.com/NativeScript/windows-runtime&quot;&gt;Windows NativeScript Runtime&lt;/a&gt; for the &lt;a href=&quot;https://msdn.microsoft.com/en-us/windows/uwp/get-started/whats-a-uwp&quot;&gt;Universal Windows Platform&lt;/a&gt;. You can find it on the official blog at &lt;a href=&quot;https://www.nativescript.org/blog/nativescript-runtime-preview-for-windows-10&quot;&gt;https://www.nativescript.org/blog/nativescript-runtime-preview-for-windows-10&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Visiting OSCON Europe 2015</title>
    <link href="http://jasssonpet.github.com/visiting-oscon-europe-2015/"/>
    <id>http://jasssonpet.github.com/visiting-oscon-europe-2015/</id>
    <published>2015-11-07T22:00:00.000Z</published>
    <updated>2016-09-26T12:32:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>I recently had the pleasure to visit <a href="http://conferences.oreilly.com/oscon/open-source-eu-2015">OSCON</a> in Amsterdam on behalf of <a href="http://www.telerik.com/">Telerik</a>. The conference was focused mainly around the use and growth of open source projects. It was my first conference of such scale and I was thrilled to meet so many new people and technologies. In this post I wish to share with you a brief summary of some of the talks that I attended. Please read further should you find it interesting:</p> <a id="more"></a> <p><a href="http://conferences.oreilly.com/oscon/open-source-eu-2015"><img src="/visiting-oscon-europe-2015/oscon-keynote-welcome.jpg" alt="OSCON keynote welcome" title="OSCON keynote welcome"></a></p> <h2 id="The-Seif-Project"><a href="#The-Seif-Project" class="headerlink" title="The Seif Project"></a>The Seif Project</h2><p>The conference started with <a href="http://www.crockford.com/">Douglas Crockford</a> presenting the <a href="http://seif.place/">Seif Project</a>. Seif is a mix of <a href="https://nodejs.org/">Node.js</a>, <a href="http://www.qt.io/">QT</a> and a browser helper app and the point is to make <strong>secure web applications</strong>. There is no HTML/CSS involved, which in his opinion, is suboptimal because of all the workarounds and limitations of the web. Parts of the project include a random number generator using entropy from the microphone and camera, secure JSON over TCP, hash-based resource management instead of named locations and more. For more information about Seif be sure to watch the <a href="https://www.youtube.com/watch?v=FHRXPlq9XNw">keynote</a>.</p> <h2 id="Programming-as-Performance-Live-Coding-With-Sonic-Pi"><a href="#Programming-as-Performance-Live-Coding-With-Sonic-Pi" class="headerlink" title="Programming as Performance - Live Coding With Sonic Pi"></a>Programming as Performance - Live Coding With Sonic Pi</h2><p>According to Sam Aaron, a research associate at the University of Cambridge, the way to get the world interested in programming is not by introducing people to binary numbers and sorting algorithms, but to the beauty of music and code put together. <a href="http://sonic-pi.net/">Sonic Pi</a> is a <strong>music synthesizer written in Ruby and a way to get kids engaged in coding</strong> (like Logo). It is available for Windows, Mac and Raspberry Pi so it’s ideal for use in any classroom. Starting with some simple imperative commands to control the pitch and duration of each sound, you are able to compose almost any existing melody. To make the experience even better, there are live loops that allow you to edit the code while the music is executing and hear the new sounds. The <a href="https://www.youtube.com/watch?v=ENfyOndcvP0">keynote</a> was very enthusiastic and I highly recommend watching it. You can also hear some of the advanced samples on the <a href="http://sonic-pi.net/">product site</a>.</p> <h2 id="5-Non-Cryptographic-Hash-Functions-Enter-One-Hash-Function-Leaves"><a href="#5-Non-Cryptographic-Hash-Functions-Enter-One-Hash-Function-Leaves" class="headerlink" title="5* Non-Cryptographic Hash Functions Enter. One Hash Function Leaves."></a>5* Non-Cryptographic Hash Functions Enter. One Hash Function Leaves.</h2><p>This talk opened the world of non-cryptographic hash functions. When you only need to check if an element exists in a set or a hash table using a non-cryptographic hash functions is usually <a href="http://security.stackexchange.com/questions/11839/">faster and more memory efficient</a> than using a cryptographic one. It was interesting to see how different algorithms like <a href="https://en.wikipedia.org/wiki/Cyclic_redundancy_check">CRC-32</a>, <a href="https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function">FNV-1</a>, <a href="https://en.wikipedia.org/wiki/MurmurHash">MurmurHash</a> behave on inputs of varying length and scale. The conclusion (as always) was to know your environment and to use what’s best for you. You can find more details about the performance of each algorithm in the <a href="http://lawngnome.github.io/non-cryptographic-hashing/">slides</a> (or this <a href="http://programmers.stackexchange.com/a/145633/20012">Stack Overflow answer</a>).</p> <h2 id="GET-Better"><a href="#GET-Better" class="headerlink" title="GET /Better"></a>GET /Better</h2><p><a href="https://www.youtube.com/watch?v=77kSLoOWxYg">In his talk</a>, Mark Bates shared the secret how he got <strong>from a security guard at a software company to a developer, speaker and book author</strong>. Of course there isn’t no magic pill, but a lot of hard work. His steps to becoming a better software engineer included practicing, networking and sharing. He shared his passion how people should be always interested in their work. Meeting up people on conferences or local groups is always a great start to build some connections and sharing with the world through a blog brings some more visibility to your work.</p> <h2 id="Growth-Hacking-Data-and-Product-Driven-Marketing"><a href="#Growth-Hacking-Data-and-Product-Driven-Marketing" class="headerlink" title="Growth Hacking: Data and Product Driven Marketing"></a>Growth Hacking: Data and Product Driven Marketing</h2><p>This was a fast-paced talk from the <a href="http://www.growthtribe.io/">Growth Tribe</a> academy explaining what <a href="https://en.wikipedia.org/wiki/Growth_hacking">growth hacking</a> is - a mix of <strong>creative marketing, behavioral psychology and unconventional tactics</strong>. Without proper distribution, no one will use your product - no matter how great it is. There are just too many new ideas and startups coming up each day. The speaker explained how there is a little bit of “evil” in the early days of many mainstream products. Through the use of a referral program for increased storage space or scraping <a href="http://craigslist.org/">craigslist</a> for local rentals, <a href="https://www.dropbox.com/">Dropbox</a> and <a href="https://www.airbnb.com/">Airbnb</a> were able to outcompete their rivals. Not everything is subversiveness, though - A/B testing, predictive analysis, talking with clients and usability testing are just as important for a product. If this made you interested in growth hacking be sure to watch the <a href="https://www.youtube.com/watch?v=ajccEoAhfmc">keynote</a>.</p> <h2 id="Innersource-as-the-Anti-Silo-How-Open-Source-Style-Has-Broken-Silos-While-Strengthening-Systems-at-PayPal"><a href="#Innersource-as-the-Anti-Silo-How-Open-Source-Style-Has-Broken-Silos-While-Strengthening-Systems-at-PayPal" class="headerlink" title="Innersource as the Anti-Silo: How Open Source Style Has Broken Silos While Strengthening Systems at PayPal"></a>Innersource as the Anti-Silo: How Open Source Style Has Broken Silos While Strengthening Systems at PayPal</h2><p>This talk was an introduction by <a href="http://www.paypal.com/">PayPal</a> to <a href="http://www.innersourcecommons.org/">InnerSource</a>. <strong>InnerSource is applying open source best practices to internal software</strong>, even if it is not being planned to be published in the future. The PayPal checkout team, which handles one of the most complex and important processes, were spending 75% of their time rewriting hundred of thousands lines of code submitted by other teams. This was frustrating for them and they didn’t have time for doing the things they wanted. The first thing that PayPal tried to fix things was to gather the lead developers from all the teams around the world together in one office for a couple of months. Supposedly this didn’t go so well, because the other developers were left out of the process. So they looked at <a href="https://community.apache.org/contributors/#from-contributor-to-committer">how the open source community handles problems of such scale</a> across languages, cultures and time zones. They adopted the pull request approach and designated a person of the checkout team whose whole responsibility was to review all incoming code. Through non-aggressive and constructive comments the percentage of code coming through pull requests went from 9% to 70% and the time spent rewriting others’ code went to 0%. This proved how open source can stimulate collaboration and improve developer happiness even in enterprise software.</p> <h2 id="Modelling-Complex-Game-Economy-With-Neo4j"><a href="#Modelling-Complex-Game-Economy-With-Neo4j" class="headerlink" title="Modelling Complex Game Economy With Neo4j"></a>Modelling Complex Game Economy With Neo4j</h2><p>This talk was about the use of <a href="https://en.wikipedia.org/wiki/Graph_database">graph databases</a> in a <a href="https://www.facebook.com/HereBeMonstersGame/">Facebook quest game</a> (discontinued). The speaker briefly showed how they used <a href="http://neo4j.com/">Neo4j</a> to <strong>automatically balance thousands of codependent items, quests and recipes</strong>. This prevents certain exploits when tweaking prices or drop rates and makes users paying real money feasible. For example a player should not be able to farm resources and resell crafted products at a cheaper price than the vendors. You can find more explanations from the author in his <a href="https://www.airpair.com/neo4j/posts/modelling-game-economy-with-neo4j">in-depth post</a>.</p> <h2 id="Real-Time-Music-Recommendations-With-Storm"><a href="#Real-Time-Music-Recommendations-With-Storm" class="headerlink" title="Real-Time Music Recommendations With Storm"></a>Real-Time Music Recommendations With Storm</h2><p>Another interesting talk was presented by <a href="https://www.spotify.com/">Spotify</a>. The essence of the talk was using <a href="http://storm.apache.org/">Apache Storm</a> to offer users music recommendations by <strong>reducing the processing time from 24 hours to a couple of minutes</strong>. This is especially useful for first time visitors. To fine-tune their <a href="http://benanne.github.io/2014/08/05/spotify-cnns.html">machine learning algorithms</a> they use <a href="http://www.slideshare.net/MrChrisJohnson/algorithmic-music-recommendations-at-spotify/35">A/B testing</a>. Given their large user sample (75 million active users, 20 million of which subscribers) they have a solid user basis for doing so. A track is taken into account only if the user has listened to it for at least 30 seconds or more and other songs from playlists in which this song appears (and any previously listened to) are picked for viable candidates.</p> <h2 id="Secure-Open-Source-Making-the-Web-Safer-One-Codebase-at-a-Time"><a href="#Secure-Open-Source-Making-the-Web-Safer-One-Codebase-at-a-Time" class="headerlink" title="Secure Open Source: Making the Web Safer, One Codebase at a Time"></a>Secure Open Source: Making the Web Safer, One Codebase at a Time</h2><p>The conference finished with an interesting initiative from <a href="https://www.mozilla.org/">Mozilla</a>. They have an idea of extending the initial <a href="https://en.wikipedia.org/wiki/Bug_bounty_program">Bug bounty program</a> that they have introduced way back in the days of Netscape and that has become a common practice in securing modern software. <a href="https://wiki.mozilla.org/MOSS">Mozilla Open Source Support (MOSS)</a> is the name of the new award program and is all about <strong>security-auditing from professional third-party consulting firms of <a href="https://wiki.mozilla.org/MOSS/Projects_in_use_by_Mozilla">open source projects that Mozilla relies on</a> and getting in touch with the respective maintainers to fix them</strong>. They are starting with $1,000,000 and the idea of the project is to prevent the next <a href="http://heartbleed.com/">Heartbleed</a> vulnerability. More info about MOSS can be found in the <a href="https://blog.mozilla.org/blog/2015/10/23/mozilla-launches-open-source-support-program/">announcing blog post</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I recently had the pleasure to visit &lt;a href=&quot;http://conferences.oreilly.com/oscon/open-source-eu-2015&quot;&gt;OSCON&lt;/a&gt; in Amsterdam on behalf of &lt;a href=&quot;http://www.telerik.com/&quot;&gt;Telerik&lt;/a&gt;. The conference was focused mainly around the use and growth of open source projects. It was my first conference of such scale and I was thrilled to meet so many new people and technologies. In this post I wish to share with you a brief summary of some of the talks that I attended. Please read further should you find it interesting:&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Generating TypeScript Declarations in NativeScript for JavaScript/CoffeeScript Code Completion</title>
    <link href="http://jasssonpet.github.com/generating-typescript-declarations-in-nativescript-for-javascript-coffeescript-code-completion/"/>
    <id>http://jasssonpet.github.com/generating-typescript-declarations-in-nativescript-for-javascript-coffeescript-code-completion/</id>
    <published>2015-10-16T21:00:00.000Z</published>
    <updated>2016-09-26T12:32:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>One thing that I like about <a href="https://github.com/NativeScript/NativeScript">NativeScript</a> is the ease with which I am able to call native APIs. But sometimes the process of getting the language projections from <a href="http://docs.nativescript.org/runtimes/ios/marshalling/Marshalling-Overview">Objective-C</a>/<a href="http://docs.nativescript.org/runtimes/android/metadata/accessing-packages">Java</a> to JavaScript right is somewhat tedious and error-prone. In this post I want to show you how the recent <a href="https://github.com/NativeScript/ios-runtime/releases/tag/v1.4.0">1.4 release</a> of NativeScript for iOS has made this experience a lot more pleasant.</p> <a id="more"></a> <h2 id="Enter-TypeScript-Declarations"><a href="#Enter-TypeScript-Declarations" class="headerlink" title="Enter TypeScript Declarations"></a>Enter TypeScript Declarations</h2><p>What are those things are you asking? Here is an explanation straight from the <a href="http://www.typescriptlang.org/Handbook#modules-working-with-other-javascript-libraries">TypeScript docs</a>:</p> <blockquote> <p>To describe the shape of libraries not written in TypeScript, we need to declare the API that the library exposes. Because most JavaScript libraries expose only a few top-level objects, modules are a good way to represent them. We call declarations that don’t define an implementation “ambient”. Typically these are defined in <code>.d.ts</code> files. If you’re familiar with C/C++, you can think of these as <code>.h</code> files or <code>extern</code>.</p> </blockquote> <h2 id="Generating-TypeScript-Declarations-from-Native-APIs"><a href="#Generating-TypeScript-Declarations-from-Native-APIs" class="headerlink" title="Generating TypeScript Declarations from Native APIs"></a>Generating TypeScript Declarations from Native APIs</h2><p>Starting with version 1.4 of NativeScript for iOS, you are able to generate TypeScript declarations on the fly from Objective-C APIs. Executing the following command from the root of your NativeScript app will produce a <code>app/typings</code> folder with a <code>.d.ts</code> file for each iOS framework.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ TNS_TYPESCRIPT_DECLARATIONS_PATH=<span class="string">"<span class="variable">$(pwd)</span>/app/typings"</span> tns build ios</div></pre></td></tr></table></figure></p> <blockquote> <p><strong>How this works:</strong> Here we are declaring the <code>TNS_TYPESCRIPT_DECLARATIONS_PATH</code> <a href="https://wiki.archlinux.org/index.php/Environment_variables">environment variable</a> which flows down to <a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html"><code>xcodebuild</code></a> which subsequently triggers the NativeScript metadata generator build step. Because of this you are able to effortlessly generate TypeScript declarations for any newly added third party framework or CocoaPod. Android support is <a href="https://github.com/NativeScript/android-dts-generator">under active development</a>, but for now you can use the pre-generated <a href="https://github.com/NativeScript/NativeScript/blob/master/android17.d.ts">android.d.ts</a> file.</p> </blockquote> <h2 id="TypeScript-Declaration-Example"><a href="#TypeScript-Declaration-Example" class="headerlink" title="TypeScript Declaration Example"></a>TypeScript Declaration Example</h2><p> Here is a simple example. Somewhere in the iOS SDK there is a <code>&lt;UIKit/UIApplication.h&gt;</code> header declaring the <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/#//apple_ref/c/func/UIApplicationMain"><code>UIApplicationMain</code></a> function:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> <span class="built_in">UIApplicationMain</span>(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[], <span class="built_in">NSString</span>* principalClassName, <span class="built_in">NSString</span>* delegateClassName);</div></pre></td></tr></table></figure></p> <p>After building your app in the aforementioned way, there should be a <code>objc!UIKit.d.ts</code> file with the same function declared, but this time with a TypeScript signature:<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">UIApplicationMain</span>(<span class="params">argc: <span class="built_in">number</span>, argv: interop.Reference&lt;<span class="built_in">string</span>&gt;, principalClassName: <span class="built_in">string</span>, delegateClassName: <span class="built_in">string</span></span>): <span class="title">number</span></span>;</div></pre></td></tr></table></figure></p> <blockquote> <p><strong>Note:</strong> Apple recently introduced Objective-C generics in Xcode 7. With a recent pull request in the iOS metadata generator (<a href="https://github.com/NativeScript/ios-runtime/pull/341">#341</a>), those are expressed in the generated <code>.d.ts</code> files as well. For example the <code>+ (NSArray&lt;NSBundle*&gt;*)allBundles</code> Objective-C method is projected as <code>static allBundles(): NSArray&lt;NSBundle&gt;</code> in TypeScript.</p> </blockquote> <h2 id="Using-TypeScript-Declarations-Outside-TypeScript"><a href="#Using-TypeScript-Declarations-Outside-TypeScript" class="headerlink" title="Using TypeScript Declarations Outside TypeScript"></a>Using TypeScript Declarations Outside TypeScript</h2><p><strong>This is all great, you say, but I <em>hate</em> TypeScript.</strong> I totally understand you and agree with you, but fear not - there is a way to combine the best of both worlds. You can use most of the benefits of native code completion not only in TypeScript, but also in JavaScript (or CoffeeScript).</p> <p>One way of doing so is by using <a href="https://www.jetbrains.com/webstorm/">WebStorm</a>. It is a world-renowned IDE for web development and a personal favorite of mine. It works on Windows, Mac OS or Linux and has an unlimited trial with 30 minute session limitation or a completely free <a href="http://confluence.jetbrains.com/display/WI/WebStorm+EAP">EAP (Early Access Program) version</a>. It has support for JavaScript, CoffeeScript and TypeScript. But even more - it has cross-language code analysis, which is why it is best for our scenario. It can pick up the metadata from the TypeScript declarations and provide intelligent code completion in all other languages:</p> <p>Here is how it looks with CoffeeScript:<br><img src="/generating-typescript-declarations-in-nativescript-for-javascript-coffeescript-code-completion/code-completion.png" alt="CoffeeScript code completion from TypeScript declarations" title="CoffeeScript code completion from TypeScript declarations"><br>We are getting some nice fuzzy code completion on the <a href="https://developer.apple.com/library/prerelease/ios//documentation/CoreFoundation/Reference/CFDateFormatterRef/index.html#//apple_ref/doc/constant_group/Date_Formatter_Styles"><code>CFDateFormatterStyle</code></a> enum.</p> <h2 id="Moving-Forward-JSDoc-Documentation-for-Native-Frameworks"><a href="#Moving-Forward-JSDoc-Documentation-for-Native-Frameworks" class="headerlink" title="Moving Forward - JSDoc Documentation for Native Frameworks"></a>Moving Forward - JSDoc Documentation for Native Frameworks</h2><p>In the next release we would like to make the experience even smoother. We are working on optionally including documentation from <a href="https://kapeli.com/dash_guide">Xcode docsets</a> (or <a href="https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/HeaderDoc/tags/tags.html">HeaderDoc</a> tags for third-party frameworks) in the generated TypeScript declarations.</p> <p>Again, this is not limited to WebStorm only, but here is how the documentation for the <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/#//apple_ref/c/func/UIApplicationMain"><code>UIApplicationMain</code></a> function looks like with the WebStorm <a href="http://usejsdoc.org/">JSDoc</a> visualizer in CoffeeScript:<br><img src="/generating-typescript-declarations-in-nativescript-for-javascript-coffeescript-code-completion/docs.png" alt="CoffeeScript documentation for UIApplicationMain" title="CoffeeScript documentation for UIApplicationMain"></p> <p>Tell us what you think about this feature in the related issue - <a href="https://github.com/NativeScript/ios-runtime/issues/353">#353</a>.</p> <p>There are some <a href="https://github.com/NativeScript/ios-runtime/issues/282">known issues</a> with generating TypeScript declarations for now, but if you find any new bugs in the generated TypeScript declarations we will be glad to fix them if you <a href="https://github.com/NativeScript/ios-runtime/issues/new">report them on GitHub</a>.</p> <p><strong>UPDATE 1:</strong> You can also use the <a href="https://www.npmjs.com/package/nativescript-dev-babel">Babel</a>, <a href="https://www.npmjs.com/package/nativescript-dev-coffeescript">CoffeeScript</a> and <a href="https://www.npmjs.com/package/nativescript-dev-typescript">TypeScript</a> NativeScript CLI plugins to ease the configuration of the the transpilers in your NativeScript project.</p> <p><strong>UPDATE 2:</strong> JSDoc comments for native APIs are now implemented - <a href="https://github.com/NativeScript/ios-metadata-generator/pull/37">#37</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;One thing that I like about &lt;a href=&quot;https://github.com/NativeScript/NativeScript&quot;&gt;NativeScript&lt;/a&gt; is the ease with which I am able to call native APIs. But sometimes the process of getting the language projections from &lt;a href=&quot;http://docs.nativescript.org/runtimes/ios/marshalling/Marshalling-Overview&quot;&gt;Objective-C&lt;/a&gt;/&lt;a href=&quot;http://docs.nativescript.org/runtimes/android/metadata/accessing-packages&quot;&gt;Java&lt;/a&gt; to JavaScript right is somewhat tedious and error-prone. In this post I want to show you how the recent &lt;a href=&quot;https://github.com/NativeScript/ios-runtime/releases/tag/v1.4.0&quot;&gt;1.4 release&lt;/a&gt; of NativeScript for iOS has made this experience a lot more pleasant.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Marshalling Arrays in NativeScript for iOS - The Road to Perfection</title>
    <link href="http://jasssonpet.github.com/marshalling-arrays-in-nativescript-for-ios-the-road-to-perfection/"/>
    <id>http://jasssonpet.github.com/marshalling-arrays-in-nativescript-for-ios-the-road-to-perfection/</id>
    <published>2015-09-20T21:00:00.000Z</published>
    <updated>2016-09-26T12:32:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>We at <a href="https://www.nativescript.org/">NativeScript</a> take performance very seriously, so we try to improve it in each release. In this blog post I want to show you how marshalling between <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array">JavaScript arrays</a> and <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/">Objective-C arrays</a> has evolved between four different versions of the <a href="https://github.com/NativeScript/ios-runtime">NativeScript Runtime for iOS</a>.</p> <a id="more"></a> <blockquote> <p>If you are not familiar with the idea of <em>marshalling</em> in general, please take a look at the docs: <a href="http://docs.nativescript.org/runtimes/ios/marshalling/Marshalling-Overview">Marshalling overview</a>.</p> </blockquote> <h2 id="v0-1-Creating-a-Deep-Copy-in-JavaScript"><a href="#v0-1-Creating-a-Deep-Copy-in-JavaScript" class="headerlink" title="v0.1 - Creating a Deep Copy in JavaScript"></a>v0.1 - Creating a Deep Copy in JavaScript</h2><p>In the very first release of NativeScript for iOS, if some method required <code>NSArray</code> as an argument, the user had to manually create a <code>NSArray</code> copy of the JavaScript array before calling the method:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">JSArrayToNSArray</span>(<span class="params">jsArray</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> nsArray = <span class="keyword">new</span> NSMutableArray();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> currentJSObject <span class="keyword">of</span> jsArray) &#123;</div><div class="line">        <span class="comment">// Objective-C Arrays can't contain nil, so use NSNull object instead.</span></div><div class="line">        <span class="comment">// Marshalling of each element of the array is still done in native.</span></div><div class="line">        nsArray.addObject(currentJSObject != <span class="literal">null</span> ? currentJSObject : NSNull.null());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> nsArray;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> textChecker = <span class="keyword">new</span> UITextChecker(); <span class="comment">// Shorthand for alloc/init</span></div><div class="line">textChecker.setIgnoredWords(JSArrayToNSArray([<span class="string">"NativeScript"</span>]));</div></pre></td></tr></table></figure></p> <p>This was the easiest way for us to implement it and in fact required no special native code. Needless to say, the code didn’t look as nice as it could and the performance of the testing apps suffered, but it was a <strong>great start to get something working</strong>.</p> <h2 id="v0-3-Creating-a-Deep-Copy-in-Native"><a href="#v0-3-Creating-a-Deep-Copy-in-Native" class="headerlink" title="v0.3 - Creating a Deep Copy in Native"></a>v0.3 - Creating a Deep Copy in Native</h2><p>After a complete rewrite and some more stabilizing to the code architecture, we were able to give some attention to details. In this version of NativeScript for iOS, the user could pass a plain JavaScript array to the above method. The bridge verified that it was a JavaScript array and implicitly handled the copying to <code>NSArray</code> in the Objective-C++ world:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSArray</span>* NativeScript::toObject(JSC::ExecState* execState, JSC::JSArray* jsArray) &#123;</div><div class="line">    <span class="built_in">NSMutableArray</span>* nsArray = [<span class="built_in">NSMutableArray</span> array];</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; jsArray-&gt;length(); ++i) &#123;</div><div class="line">        JSC::JSValue currentJSObject = jsArray-&gt;get(execState, i);</div><div class="line">        <span class="keyword">id</span> currentObject = NativeScript::toObject(execState, currentJSObject);</div><div class="line"></div><div class="line">        <span class="comment">// Objective-C Arrays can't contain nil, so use NSNull object instead.</span></div><div class="line">        [nsArray addObject:currentObject ?: [<span class="built_in">NSNull</span> null]];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> nsArray;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> textChecker = <span class="keyword">new</span> UITextChecker();</div><div class="line">textChecker.setIgnoredWords([<span class="string">"NativeScript"</span>]);</div></pre></td></tr></table></figure> <p>The first approach was still working, but this was the preferred way now. This way <strong>the code looked cleaner <em>and</em> there was a decent performance gain</strong>.</p> <h2 id="v1-0-Creating-a-Shallow-Copy"><a href="#v1-0-Creating-a-Shallow-Copy" class="headerlink" title="v1.0 - Creating a Shallow Copy"></a>v1.0 - Creating a Shallow Copy</h2><p>But we didn’t stop here. For the official release there was no longer a deep copy of JavaScript arrays, but a shallow one (<a href="https://github.com/NativeScript/ios-runtime/pull/64">#64</a> by <a href="https://github.com/fealebenpae">@fealebenpae</a>). Instead of copying the contents of the entire array, the native object now stored a strong reference to the JavaScript object. Marshalling of each element was done on demand.</p> <blockquote> <p>For this release not only JavaScript arrays could be implicitly marshalled to <code>NSArray</code>, but also any array-like object.</p> </blockquote> <p>According to the <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/">Apple docs</a> a good way to change how <code>NSArray</code> stores its elements is by subclassing it. There are two required methods to be implemented which look something like the following:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">TNSJavaScriptArrayAdapter</span> : <span class="title">NSArray</span> </span>&#123;</div><div class="line">    JSC::Strong&lt;JSC::JSArray&gt; _jsArray;</div><div class="line">    JSC::ExecState* _execState;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)initWithJSArray:(JSC::JSArray*)jsArray execState:(JSC::ExecState*)execState &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">self</span> init]) &#123;</div><div class="line">        _jsArray = jsArray;</div><div class="line">        _execState = execState;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSUInteger</span>)count &#123;</div><div class="line">    <span class="keyword">return</span> _jsArray-&gt;length()</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)objectAtIndex:(<span class="built_in">NSUInteger</span>)index &#123;</div><div class="line">    JSC::JSValue currentJSObject = jsArray-&gt;get(_execState, index);</div><div class="line">    <span class="keyword">id</span> currentObject = NativeScript::toObject(execState, currentJSObject);</div><div class="line">    <span class="keyword">return</span> currentObject;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p> <p>There wasn’t so big of a performance gain this time, but this implementation <strong>reduced the memory footprint</strong> of our apps by skipping a copy of each array.</p> <h2 id="v1-2-Creating-a-Shallow-Copy-and-Implementing-NSFastEnumeration"><a href="#v1-2-Creating-a-Shallow-Copy-and-Implementing-NSFastEnumeration" class="headerlink" title="v1.2 - Creating a Shallow Copy and Implementing NSFastEnumeration"></a>v1.2 - Creating a Shallow Copy and Implementing <code>NSFastEnumeration</code></h2><p>The last change (so far) for marshalling JavaScript arrays to Objective-C was the implementation of the <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSFastEnumeration_protocol/"><code>NSFastEnumeration</code></a> protocol (<a href="https://github.com/NativeScript/ios-runtime/pull/222">#222</a> by <a href="https://github.com/fealebenpae">@fealebenpae</a>). You can learn more about <code>NSFastEnumeration</code> on <a href="http://nshipster.com/enumerators/">NSHipster</a>, but the essence is a single method named <code>countByEnumeratingWithState:objects:count:</code>, which the aforementioned <code>TNSJavaScriptArrayAdapter</code> implements:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSUInteger</span>)countByEnumeratingWithState:(<span class="built_in">NSFastEnumerationState</span> *)state objects:(<span class="keyword">id</span> [])stackbuf count:(<span class="built_in">NSUInteger</span>)len &#123;</div><div class="line">    <span class="comment">// Uninitialized</span></div><div class="line">    <span class="keyword">if</span> (state-&gt;state == <span class="number">0</span>) &#123;</div><div class="line">        state-&gt;state = <span class="number">1</span>;</div><div class="line">        state-&gt;mutationsPtr = reinterpret_cast&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span>*&gt;(<span class="keyword">self</span>);</div><div class="line">        state-&gt;extra[<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">// Current index</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">NSUInteger</span> count = <span class="number">0</span>;</div><div class="line">    <span class="built_in">NSUInteger</span> currentIndex = state-&gt;extra[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span> (; count &lt; len &amp;&amp; currentIndex &lt; _jsArray-&gt;length(); currentIndex++, count++) &#123;</div><div class="line">        JSC::JSValue currentJSObject = jsArray-&gt;get(_execState, index);</div><div class="line">        <span class="keyword">id</span> currentObject = NativeScript::toObject(execState, currentJSObject);</div><div class="line">        *stackbuf++ = currentObject;</div><div class="line">    &#125;</div><div class="line">    state-&gt;extra[<span class="number">0</span>] = currentIndex;</div><div class="line"></div><div class="line">    state-&gt;itemsPtr = stackbuf;</div><div class="line">    <span class="keyword">return</span> count;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p> <p>The runtime is given a preallocated buffer on the stack, and fills it up accordingly. This way there are fewer method calls and objects can be loaded concurrently. In certain tests the same JavaScript code was <strong>up to 30x faster</strong> than in the previous release.</p> <blockquote> <p>Another thing that was made possible in this release of NativeScript for iOS was creating a <a href="http://docs.nativescript.org/runtimes/ios/how-to/ObjC-Subclassing">custom subclass of an Objective-C class in JavaScript</a> and implementing the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols">JavaScript iteration protocol</a>. The runtime will look it up and will create a stub implementation of the <code>NSFastEnumeration</code> protocol which consumes the provided JavaScript one.</p> </blockquote> <h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>I’ve shown you only one aspect of the NativeScript Runtime, but you can see how it is constantly pushing the edges to be as fast as it can, while taking less memory and making the code easier to read.</p> <p>If you have any further suggestions or questions about NativeScript, don’t hesitate to <a href="https://github.com/NativeScript/ios-runtime/issues/new">open an issue on GitHub</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We at &lt;a href=&quot;https://www.nativescript.org/&quot;&gt;NativeScript&lt;/a&gt; take performance very seriously, so we try to improve it in each release. In this blog post I want to show you how marshalling between &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;JavaScript arrays&lt;/a&gt; and &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/&quot;&gt;Objective-C arrays&lt;/a&gt; has evolved between four different versions of the &lt;a href=&quot;https://github.com/NativeScript/ios-runtime&quot;&gt;NativeScript Runtime for iOS&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Running the NativeScript Runtime for iOS on Apple TV</title>
    <link href="http://jasssonpet.github.com/running-the-nativescript-runtime-for-ios-on-apple-tv/"/>
    <id>http://jasssonpet.github.com/running-the-nativescript-runtime-for-ios-on-apple-tv/</id>
    <published>2015-09-15T21:00:00.000Z</published>
    <updated>2016-09-26T12:32:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve written a short blog post about running the <a href="https://github.com/NativeScript/ios-runtime">NativeScript Runtime for iOS</a> on the new <a href="https://developer.apple.com/tvos/">Apple TV</a>. You can find it on the official blog at <a href="https://www.nativescript.org/blog/running-the-nativescript-runtime-for-ios-on-apple-tv">https://www.nativescript.org/blog/running-the-nativescript-runtime-for-ios-on-apple-tv</a>.</p> <a id="more"></a> <p>There is also a sample app on GitHub: <a href="https://github.com/NativeScript/sample-tvOS">https://github.com/NativeScript/sample-tvOS</a>.</p> <p><a href="https://www.nativescript.org/blog/running-the-nativescript-runtime-for-ios-on-apple-tv"><img src="/running-the-nativescript-runtime-for-ios-on-apple-tv/apple-tv-demo.png" alt="Sample NativeScript app running on Apple TV" title="Sample NativeScript app running on Apple TV"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I’ve written a short blog post about running the &lt;a href=&quot;https://github.com/NativeScript/ios-runtime&quot;&gt;NativeScript Runtime for iOS&lt;/a&gt; on the new &lt;a href=&quot;https://developer.apple.com/tvos/&quot;&gt;Apple TV&lt;/a&gt;. You can find it on the official blog at &lt;a href=&quot;https://www.nativescript.org/blog/running-the-nativescript-runtime-for-ios-on-apple-tv&quot;&gt;https://www.nativescript.org/blog/running-the-nativescript-runtime-for-ios-on-apple-tv&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Under the Curtains of &lt;HTMLView /&gt; for NativeScript for iOS</title>
    <link href="http://jasssonpet.github.com/under-the-curtains-of-htmlview-for-nativescript-for-ios/"/>
    <id>http://jasssonpet.github.com/under-the-curtains-of-htmlview-for-nativescript-for-ios/</id>
    <published>2015-08-02T21:00:00.000Z</published>
    <updated>2016-09-26T12:32:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>We just released <a href="https://www.nativescript.org/blog/nativescript-1.2-release---live-sync-push-notifications-native-plugins-and-more">version 1.2 of NativeScript</a> which among many new features included a new <a href="https://docs.nativescript.org/ApiReference/ui/html-view/HOW-TO"><code>&lt;HTMLView /&gt;</code></a> element. I’ll show you what stands behind it with nothing but plain JavaScript running on the <a href="https://github.com/NativeScript/ios-runtime">iOS runtime</a>.</p> <a id="more"></a> <p>We are going to start with the iOS <a href="https://docs.nativescript.org/runtimes/ios/getting-started/HelloWorld">“Hello, World!” template</a> and we will replace the contents of the label from <code>NSString</code> with <code>NSAttributedString</code>. On iOS the <code>&lt;HTMLView /&gt;</code> element uses <code>NSAttributedString</code> to render itself. You can read more about it in the <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSAttributedString_Class/">Apple docs</a>, but in short “it manages character strings and associated sets of attributes (for example, font and kerning) that apply to individual characters or ranges of characters in the string”.</p> <p><a href="https://gist.github.com/jasssonpet/1637318e302096148885"><img src="/under-the-curtains-of-htmlview-for-nativescript-for-ios/html-view-demo.png" alt="Hello, NativeScript!" title="Hello, NativeScript!"></a></p> <blockquote> <p>You can see the whole code example in <a href="https://gist.github.com/jasssonpet/1637318e302096148885">this gist</a>.</p> </blockquote> <p>Here is how you create a <code>NSAttributedString</code> using Swift 2 (not released yet as of writing):<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">attributedStringFromHTMLString</span><span class="params">(str: NSString)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">NSAttributedString</span> &#123;</div><div class="line">    <span class="keyword">let</span> encodedData = str.dataUsingEncoding(<span class="type">NSUTF8StringEncoding</span>)!</div><div class="line">    <span class="keyword">let</span> attributeOptions: [<span class="type">String</span>: <span class="type">AnyObject</span>] = [</div><div class="line">        <span class="type">NSDocumentTypeDocumentAttribute</span>: <span class="type">NSHTMLTextDocumentType</span>,</div><div class="line">        <span class="type">NSCharacterEncodingDocumentAttribute</span>: <span class="type">NSUTF8StringEncoding</span></div><div class="line">    ]</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">try</span> <span class="type">NSAttributedString</span>(data: encodedData, options: attributeOptions, documentAttributes: <span class="literal">nil</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p> <p>And here is how you do it with NativeScript 1.2:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">attributedStringFromHTMLString</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> encodedData = NSString.stringWithString(str).dataUsingEncoding(NSUTF8StringEncoding)</div><div class="line">    <span class="keyword">var</span> attributeOptions = &#123;</div><div class="line">        [NSDocumentTypeDocumentAttribute]: NSHTMLTextDocumentType,</div><div class="line">        [NSCharacterEncodingDocumentAttribute]: NSUTF8StringEncoding</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> NSAttributedString.alloc().initWithDataOptionsDocumentAttributesError(encodedData, attributeOptions, <span class="literal">null</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p> <p>These snippets look quite similar, don’t you think? The JavaScript code may look very simple, but there is a bit more going on. Let’s see the details one by one:</p> <h2 id="Error-Handling"><a href="#Error-Handling" class="headerlink" title="Error Handling"></a>Error Handling</h2><p>We are calling <a href="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/NSAttributedString_UIKit_Additions/index.html#//apple_ref/occ/instm/NSAttributedString/initWithData:options:documentAttributes:error:">the following method</a>:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">instancetype</span>)initWithData:(<span class="built_in">NSData</span> *)data</div><div class="line">                     options:(<span class="built_in">NSDictionary</span> *)options</div><div class="line">          documentAttributes:(<span class="built_in">NSDictionary</span> **)dict</div><div class="line">                       error:(<span class="built_in">NSError</span> **)error;</div></pre></td></tr></table></figure></p> <p>In Objective-C, you pass a reference to a <code>NSError</code> variable and the method will set it to a <code>NSError</code> object if there has been some kind of problem.</p> <p>As you might have noticed, this method has 4 parameters, but we are calling it with 3 arguments. This is because in Swift 2 Apple introduced <a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/AdoptingCocoaDesignPatterns.html#//apple_ref/doc/uid/TP40014216-CH7-ID10">tighter integration with Objective-C error handling</a>. In Swift 2 you can skip the last parameter and use the <code>try</code>/<code>catch</code> mechanism to check if an error occurred.</p> <p>With the 1.2 release of the iOS runtime we made the same thing possible (<a href="https://github.com/NativeScript/ios-runtime/issues/186">#186</a>, <a href="https://docs.nativescript.org/runtimes/ios/marshalling/Marshalling-Overview#nserror--marshalling">docs</a>) and you can enjoy this neat feature before even Swift 2 is released. If you skip the last argument, this method will now throw a JavaScript object which wrapps the <code>NSError</code> object if the out parameter is set. You can use the JavaScript <code>try</code>/<code>catch</code> construct to check if an error occurred. (If you override such methods, any thrown JavaScript error will be respectively wrapped in a <code>NSError</code> object.)</p> <h2 id="ES6-Computed-Property-Names"><a href="#ES6-Computed-Property-Names" class="headerlink" title="ES6 Computed Property Names"></a>ES6 Computed Property Names</h2><p>One of the major changes in the 1.2 release of the iOS runtime is that we updated our JavaScriptCore engine. Our last update was more than 10 months ago, but we now use CMake to build our runtime and the JavaScriptCore engine and this allowed us to seemlessly upgrade it two times in the last release. This means that you will be using the latest JavaScript features such as <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Computed_property_names">computed property names</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions">arrow functions</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings">template strings</a> on <em>all</em> iOS versions as soon as they become available (we bundle the JavaScriptCore engine with each app).</p> <p>Lets take a look at this object:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> attributeOptions = &#123;</div><div class="line">    [NSDocumentTypeDocumentAttribute]: NSHTMLTextDocumentType,</div><div class="line">    [NSCharacterEncodingDocumentAttribute]: NSUTF8StringEncoding</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p> <p>Starting with ECMAScript 6, the object initializer syntax also supports computed property names. That allows you to put an expression in brackets <code>[]</code>, that will be computed as the property name. In this snippet <code>NSDocumentTypeDocumentAttribute</code> and <code>NSCharacterEncodingDocumentAttribute</code> are Objective-C <code>NSString</code> global variables exposed in the global JavaScript scope.</p> <h2 id="Marshalling-from-JSON-Object-to-NSDictionary"><a href="#Marshalling-from-JSON-Object-to-NSDictionary" class="headerlink" title="Marshalling from JSON Object to NSDictionary"></a>Marshalling from JSON Object to <code>NSDictionary</code></h2><p>Notice that the <code>initWithData:options:documentAttributes:error:</code> method accepts a <code>NSDictionary</code> object as second parameter, but we are passing a plain JavaScript object. This is possible because the iOS runtime implicitly wraps it in a <code>NSDictionary</code> object (<a href="https://github.com/NativeScript/ios-runtime/pull/64">#64</a>). It doesn’t create a copy of the object, so this operation should be pretty fast.</p> <p>This is only some of the magic that happens in 5 lines of code in the iOS runtime. If you have any suggestions you would like to see implemented, we will be glad to <a href="https://github.com/NativeScript/ios-runtime/issues/new">discuss them on GitHub</a>.</p> <p><strong>P.S.</strong> More of a joke, but the last feature that allows the Swift and JavaScript code to look so alike is <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Automatic_semicolon_insertion">JavaScript ASI</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We just released &lt;a href=&quot;https://www.nativescript.org/blog/nativescript-1.2-release---live-sync-push-notifications-native-plugins-and-more&quot;&gt;version 1.2 of NativeScript&lt;/a&gt; which among many new features included a new &lt;a href=&quot;https://docs.nativescript.org/ApiReference/ui/html-view/HOW-TO&quot;&gt;&lt;code&gt;&amp;lt;HTMLView /&amp;gt;&lt;/code&gt;&lt;/a&gt; element. I’ll show you what stands behind it with nothing but plain JavaScript running on the &lt;a href=&quot;https://github.com/NativeScript/ios-runtime&quot;&gt;iOS runtime&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
